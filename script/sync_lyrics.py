#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script pour synchroniser des paroles non synchronis√©es avec un fichier audio MP3
et g√©n√©rer un fichier de paroles synchronis√©es au format LRC (Enhanced LRC).
"""

import argparse
import os
import time
import pygame # Ajout de pygame
from mutagen.easyid3 import EasyID3 # Ajout pour les m√©tadonn√©es MP3
import stable_whisper # Ajout pour stable-ts
import json # Pour manipuler les r√©sultats de stable-ts si besoin
import re # Pour parser le SRT
from io import StringIO # Pour lire le SRT en m√©moire

class LyricsSyncer:
    """
    Classe pour g√©rer la synchronisation des paroles.
    """
    def __init__(self, mp3_path, lyrics_path, output_path_arg=None, mode="line"):
        self.mp3_path = mp3_path
        self.lyrics_path = lyrics_path
        self.mode = mode
        # self.output_path et self.output_format seront d√©finis par _determine_output_format_and_path
        self.output_path = None
        self.output_format = None

        self._determine_output_format_and_path(output_path_arg)

        if not os.path.exists(self.mp3_path):
            raise FileNotFoundError(f"Fichier MP3 non trouv√© : {self.mp3_path}")
        if not os.path.exists(self.lyrics_path):
            raise FileNotFoundError(f"Fichier de paroles non trouv√© : {self.lyrics_path}")

        self.raw_lyrics_lines = self._load_raw_lyrics()
        self.synced_lyrics = [] # Contiendra les lignes [mm:ss.xx]Paroles

    def _generate_output_path(self):
        """
        G√©n√®re un chemin de sortie par d√©faut pour le fichier synchronis√©,
        en utilisant self.output_format pour d√©terminer l'extension.
        """
        base, _ = os.path.splitext(self.mp3_path)
        # self.output_format est d√©j√† d√©fini dans __init__ avant l'appel potentiel √† cette m√©thode.
        return f"{base}.{self.output_format}"

    def _load_raw_lyrics(self):
        """Charge les lignes de paroles depuis le fichier .txt."""
        with open(self.lyrics_path, 'r', encoding='utf-8') as f:
            lines = [line.strip() for line in f if line.strip()]
        return lines

    def _format_time(self, seconds_float):
        """Convertit un temps en secondes (float) au format mm:ss.xx."""
        minutes = int(seconds_float // 60)
        seconds = int(seconds_float % 60)
        hundredths = int((seconds_float - (minutes * 60) - seconds) * 100)
        return f"{minutes:02d}:{seconds:02d}.{hundredths:02d}"

    def sync_manually_per_line(self):
        """
        Permet √† l'utilisateur de synchroniser les paroles manuellement ligne par ligne.
        L'utilisateur appuie sur une touche pour marquer le d√©but de chaque ligne.
        """
        print(f"Chargement du MP3 : {self.mp3_path}")
        print("Pr√©parez-vous √† synchroniser les paroles.")
        print("Appuyez sur Entr√©e au moment o√π chaque ligne de parole commence.")
        print("Appuyez sur 'q' puis Entr√©e pour quitter en cours de synchronisation.")
        print("-" * 30)

        playback_started = False
        # Initialisation de start_time pour le cas o√π pygame √©choue compl√®tement
        start_time = time.time()

        try:
            # Essai d'initialisation de pygame.mixer avec des param√®tres sp√©cifiques
            try:
                pygame.mixer.init(frequency=44100, size=-16, channels=2, buffer=2048)
            except pygame.error as e_init_specific:
                print(f"Avertissement : Erreur lors de l'initialisation de pygame.mixer (param√®tres sp√©cifiques): {e_init_specific}")
                print("Tentative d'initialisation avec les param√®tres par d√©faut.")
                pygame.mixer.init() # Essai avec les param√®tres par d√©faut si le premier √©choue

            # Si l'initialisation a r√©ussi, on charge et joue la musique
            pygame.mixer.music.load(self.mp3_path)
            print(f"Lecture de : {self.mp3_path}")
            pygame.mixer.music.play()
            start_time = time.time() # R√©cup√©rer le temps de d√©but r√©el APRES le play()
            playback_started = True

        except pygame.error as e_pygame:
            # Cette exception attrape les erreurs de init() par d√©faut ou de load()/play()
            print(f"Erreur Pygame : {e_pygame}")
            print("La synchronisation se fera sans lecture audio r√©elle (simulation du temps).")
            # start_time est d√©j√† initialis√© pour la simulation
            # playback_started reste False

        for i, line in enumerate(self.raw_lyrics_lines):
            print(f"\nProchaine ligne ({i+1}/{len(self.raw_lyrics_lines)}):")
            print(f"üéµ {line} üéµ")

            user_input = input("Appuyez sur Entr√©e ou 'q' pour quitter: ")
            if user_input.lower() == 'q':
                print("Synchronisation annul√©e par l'utilisateur.")
                self.synced_lyrics = [] # Vider pour ne pas sauvegarder un fichier partiel
                break

            current_timestamp_sec = time.time() - start_time
            formatted_time = self._format_time(current_timestamp_sec)
            self.synced_lyrics.append(f"[{formatted_time}]{line}")
            print(f"-> Ligne enregistr√©e √† {formatted_time}")

        if playback_started:
            pygame.mixer.music.stop()
            pygame.mixer.quit()

        print("\nSynchronisation termin√©e.")
        self._save_lrc_file()

    def _save_lrc_file(self, output_path_override=None):
        """
        Sauvegarde les paroles synchronis√©es (contenues dans self.synced_lyrics)
        dans un fichier .lrc.
        Utilise output_path_override si fourni, sinon self.output_path.
        """
        if not self.synced_lyrics:
            print("Aucune parole synchronis√©e √† sauvegarder en LRC.")
            return False # Indiquer l'√©chec

        # D√©terminer le chemin de sauvegarde final
        save_path = output_path_override or self.output_path
        # S'assurer que le chemin final a la bonne extension .lrc si c'est un LRC
        # (normalement g√©r√© par __init__ ou par l'appelant pour override)
        # Si output_path_override est fourni, on fait confiance √† l'appelant pour l'extension.
        # Si self.output_path est utilis√©, il devrait d√©j√† avoir la bonne extension via __init__.

        # Ajout de tags d'identification
        lrc_content = []

        title = "Unknown Title"
        artist = "Unknown Artist"
        album = "Unknown Album"

        try:
            audio_meta = EasyID3(self.mp3_path)
            if "title" in audio_meta:
                title = audio_meta["title"][0]
            if "artist" in audio_meta:
                artist = audio_meta["artist"][0]
            if "album" in audio_meta:
                album = audio_meta["album"][0]
        except Exception as e:
            print(f"Avertissement : Impossible de lire les m√©tadonn√©es ID3 du MP3 : {e}")

        lrc_content.append(f"[ti:{title}]")
        lrc_content.append(f"[ar:{artist}]")
        lrc_content.append(f"[al:{album}]")
        lrc_content.append(f"[by:Autolyrics Syncer v0.1]") # On pourrait ajouter le mode utilis√©

        lrc_content.extend(self.synced_lyrics)

        try:
            with open(save_path, 'w', encoding='utf-8') as f:
                for line in lrc_content:
                    f.write(line + "\n")
            print(f"Fichier LRC sauvegard√© : {save_path}")
            return True # Indiquer le succ√®s
        except IOError as e:
            print(f"‚ùå Erreur lors de la sauvegarde du fichier LRC '{save_path}': {e}")
            return False # Indiquer l'√©chec

    def sync_manually_per_word(self):
        """
        Permet √† l'utilisateur de synchroniser les paroles mot par mot.
        (Plus complexe, √† impl√©menter dans une future it√©ration)
        """
        print("La synchronisation mot par mot n'est pas encore impl√©ment√©e.")
        # Logique possible:
        # 1. Afficher la ligne enti√®re.
        # 2. Lire la ligne (synth√®se vocale ou le chanteur).
        # 3. L'utilisateur appuie sur une touche pour chaque mot.
        # 4. N√©cessite une interface plus interactive (ex: avec curses, PySimpleGUI, ou web).
        pass

    def sync_auto_stable_ts(self, model_name="base", language="ja"):
        """
        Synchronise automatiquement les paroles en utilisant stable-ts.
        Le r√©sultat brut de stable-ts est stock√© dans self.raw_alignment_result
        pour √™tre trait√© ult√©rieurement par une autre m√©thode pour la conversion LRC.
        """
        print(f"\nüîÑ D√©but de la synchronisation automatique avec stable-ts (mod√®le: {model_name}, langue: {language})...")
        self.raw_alignment_result = None # Pour stocker le r√©sultat de l'alignement

        if not os.path.exists(self.mp3_path):
            print(f"‚ùå Erreur : Fichier audio introuvable : {self.mp3_path}")
            return False
        # Le fichier de paroles brutes (self.lyrics_path) est d√©j√† v√©rifi√© dans __init__

        print(f"Chargement du mod√®le Whisper '{model_name}' via stable-ts. Cela peut prendre du temps...")
        try:
            # Forcer CPU pour la coh√©rence avec l'environnement de test et √©viter probl√®mes GPU AMD
            model = stable_whisper.load_model(model_name, device="cpu")
            print("Mod√®le charg√©.")
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement du mod√®le Whisper '{model_name}': {e}")
            return False

        print(f"Lecture du fichier texte des paroles : {self.lyrics_path}")
        with open(self.lyrics_path, 'r', encoding='utf-8') as f:
            text_content = f.read()

        if not text_content.strip():
            print("‚ùå Erreur : Le fichier texte des paroles est vide.")
            return False

        print(f"Alignement de '{self.mp3_path}' avec le texte fourni...")
        start_process_time = time.time()

        try:
            # Utilisation de model.align()
            # regroup=False est crucial pour obtenir des timestamps au niveau du mot/segment fin.
            result = model.align(self.mp3_path, text_content, language=language, regroup=False)
            self.raw_alignment_result = result

        except Exception as e:
            print(f"‚ùå Erreur lors de l'alignement avec stable-ts : {e}")
            return False

        end_process_time = time.time()
        print(f"‚úÖ Alignement par stable-ts termin√© en {end_process_time - start_process_time:.2f} secondes.")

        # √Ä ce stade, self.raw_alignment_result contient l'objet WhisperResult.
        # La conversion en LRC sera faite dans une √©tape/m√©thode s√©par√©e.
        # Pour l'instant, on peut afficher un r√©sum√© ou un indicateur de succ√®s.

        if self.raw_alignment_result and hasattr(self.raw_alignment_result, 'segments'):
            print(f"Nombre de segments align√©s : {len(self.raw_alignment_result.segments)}")
            # Sauvegarde temporaire du JSON pour inspection si besoin (peut √™tre retir√© plus tard)
            temp_json_path = os.path.splitext(self.output_path)[0] + "_stable_ts_debug.json"
            try:
                with open(temp_json_path, 'w', encoding='utf-8') as f_json:
                    json.dump(self.raw_alignment_result.to_dict(), f_json, indent=2, ensure_ascii=False)
                print(f"R√©sultat brut de l'alignement sauvegard√© (pour debug) : {temp_json_path}")
            except Exception as e_json:
                print(f"Avertissement : Impossible de sauvegarder le JSON de debug : {e_json}")
            return True
        else:
            print("‚ö†Ô∏è Aucun segment n'a √©t√© retourn√© par stable-ts.")
            return False

    def _save_stable_ts_result_as_srt(self, output_path_srt):
        """
        Sauvegarde le r√©sultat de l'alignement stable-ts directement en format SRT.
        """
        if not self.raw_alignment_result:
            print("‚ùå Aucun r√©sultat d'alignement stable-ts √† sauvegarder en SRT.")
            return False

        # S'assurer que le chemin de sortie a bien l'extension .srt
        # Normalement d√©j√† g√©r√© par _determine_output_format_and_path si mode='auto_stablets'
        # et aucun output_path_arg n'a √©t√© fourni avec une autre extension.
        # Mais on peut forcer ici pour √™tre s√ªr si cette m√©thode est appel√©e directement.
        base, _ = os.path.splitext(output_path_srt)
        actual_output_path_srt = f"{base}.srt"

        try:
            self.raw_alignment_result.to_srt_vtt(actual_output_path_srt, word_level=True)
            print(f"‚úÖ Fichier SRT sauvegard√© : {actual_output_path_srt}")
            # Mettre √† jour self.output_path au cas o√π l'extension aurait √©t√© forc√©e ici
            self.output_path = actual_output_path_srt
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde du fichier SRT : {e}")
            return False

    # Les m√©thodes _convert_stable_ts_result_to_lrc, _parse_srt_time,
    # _convert_srt_content_to_lrc_data, et _save_lrc_from_srt_result sont supprim√©es.

def main():
    parser = argparse.ArgumentParser(
        description="Synchronise un fichier de paroles (.txt) avec un fichier audio (.mp3).\n"
                    "Mode manuel ('line') produit un .lrc.\n"
                    "Mode automatique ('auto_stablets') produit un .srt.",
        formatter_class=argparse.RawTextHelpFormatter # Pour mieux contr√¥ler le help multiligne
    )
    parser.add_argument("mp3_path", help="Chemin vers le fichier .mp3")
    parser.add_argument("lyrics_path", help="Chemin vers le fichier .txt des paroles non synchronis√©es")
    parser.add_argument("-o", "--output", help="Chemin vers le fichier de sortie (optionnel, d√©faut: <nom_mp3>.[lrc|srt])")

    # L'option --output_format est supprim√©e. Le format est d√©termin√© par le mode.

    parser.add_argument(
        "--mode",
        choices=["line", "auto_stablets"], # "word" (manuel mot/mot) n'est pas impl√©ment√©
        default="line",
        help=("Mode de synchronisation:\n"
              "  'line': Manuel, ligne par ligne.\n"
              "  'word': Manuel, mot par mot (non impl√©ment√©).\n"
              "  'auto_stablets': Automatique avec stable-ts (Whisper).")
    )
    # Options sp√©cifiques pour auto_stablets
    parser.add_argument(
        "--st_model",
        default="base",
        choices=["tiny", "base", "small", "medium", "large", "large-v1", "large-v2", "large-v3"],
        help="Mod√®le Whisper √† utiliser pour le mode 'auto_stablets'."
    )
    parser.add_argument(
        "--st_lang",
        default="ja",
        help="Code langue pour Whisper en mode 'auto_stablets' (ex: 'ja', 'en')."
    )

    args = parser.parse_args()

    try:
        syncer = LyricsSyncer(args.mp3_path, args.lyrics_path, args.output, args.output_format)

        if args.mode == "line":
            # Le mode manuel g√©n√®re toujours du LRC pour l'instant.
            # Si l'output_format demand√© est SRT, on pourrait afficher un avertissement
            # ou d√©sactiver la sauvegarde si on veut √™tre strict.
            # Pour l'instant, il sauvegardera en .lrc (car self.output_path est ajust√© dans __init__)
            # si output_path n'est pas sp√©cifi√©, ou avec l'extension donn√©e par l'utilisateur.
            if syncer.output_format == "srt":
                print("Avertissement : Le mode de synchronisation manuel 'line' g√©n√®re du .lrc. "
                      "L'option --output_format=srt est ignor√©e pour ce mode, sauf si "
                      "le nom de fichier de sortie explicite se termine par .srt.")
            syncer.sync_manually_per_line()
        elif args.mode == "word":
            syncer.sync_manually_per_word() # Toujours non impl√©ment√©
        elif args.mode == "auto_stablets":
            align_success = syncer.sync_auto_stable_ts(model_name=args.st_model, language=args.st_lang)
            if align_success:
                if syncer.output_format == "srt":
                    print(f"G√©n√©ration du fichier SRT (chemin: {syncer.output_path})...")
                    save_success = syncer._save_stable_ts_result_as_srt(syncer.output_path)
                    if save_success:
                        print("‚úÖ Fichier SRT g√©n√©r√© avec succ√®s.")
                    else:
                        print("‚ùå √âchec de la sauvegarde du fichier SRT.")
                elif syncer.output_format == "lrc":
                    print(f"G√©n√©ration du fichier LRC via conversion SRT (chemin: {syncer.output_path})...")
                    save_success = syncer._save_lrc_from_srt_result(syncer.output_path)
                    if save_success:
                        print("‚úÖ Fichier LRC g√©n√©r√© avec succ√®s via conversion SRT.")
                    else:
                        print("‚ùå √âchec de la g√©n√©ration du fichier LRC via conversion SRT.")
                else:
                    # Normalement, __init__ force output_format √† srt ou lrc si un chemin de sortie est donn√©
                    # ou si le format par d√©faut est utilis√©. Ce cas ne devrait pas arriver.
                    print(f"Format de sortie non support√© '{syncer.output_format}' pour le mode auto_stablets.")
            else:
                print("‚ùå La synchronisation automatique avec stable-ts a √©chou√©. Aucun fichier ne sera g√©n√©r√©.")

    except FileNotFoundError as e:
        print(f"Erreur : {e}")
    except Exception as e:
        print(f"Une erreur inattendue est survenue : {e}")

if __name__ == "__main__":
    main()
